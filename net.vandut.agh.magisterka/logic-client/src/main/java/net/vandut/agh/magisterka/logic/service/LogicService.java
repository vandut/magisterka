package net.vandut.agh.magisterka.logic.service;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by FuseSource Services Framework 2.4.3-fuse-00-13
 * 2012-09-28T00:57:08.089+02:00
 * Generated source version: 2.4.3-fuse-00-13
 * 
 */
@WebServiceClient(name = "LogicService", 
                  wsdlLocation = "file:/C:/dev/magisterka/net.vandut.agh.magisterka/logic/src/main/resources/LogicService.wsdl",
                  targetNamespace = "http://service.logic.magisterka.agh.vandut.net/") 
public class LogicService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://service.logic.magisterka.agh.vandut.net/", "LogicService");
    public final static QName Soap = new QName("http://service.logic.magisterka.agh.vandut.net/", "soap");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/dev/magisterka/net.vandut.agh.magisterka/logic/src/main/resources/LogicService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(LogicService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/dev/magisterka/net.vandut.agh.magisterka/logic/src/main/resources/LogicService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public LogicService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LogicService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LogicService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns Logic
     */
    @WebEndpoint(name = "soap")
    public Logic getSoap() {
        return super.getPort(Soap, Logic.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Logic
     */
    @WebEndpoint(name = "soap")
    public Logic getSoap(WebServiceFeature... features) {
        return super.getPort(Soap, Logic.class, features);
    }

}
